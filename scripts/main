#!/usr/bin/env zsh

# Expand VPN_FILE pattern to list of files
VPN_FILES=(${(@s/ /)~VPN_FILE})
# Choose random item from the list of files
VPN_FILE="$VPN_FILES[RANDOM % $#VPN_FILES + 1]"
date
echo "proxy url: socks5h://127.0.0.1:1080"
echo "config: $VPN_FILE"
echo "Fetching base IP..."
echo "base_ip: $(base_ip)"

# Compatibility with older format
VPN_USER=${VPN_USER:-$USER}
VPN_PASS=${VPN_PASS:-$PASSWORD}

if [ "$SHELL" ]; then
  OPENVPN_ARGS="--daemon"
else
  OPENVPN_ARGS=""
fi

# Create OpenVPN files
mkdir -p /dev/net
mknod /dev/net/tun c 10 200

# Backup the resolv.conf to restore when the connection goes down
cp /etc/resolv.conf{,.backup}

echo "openvpn args: $OPENVPN_ARGS"

export HTTP_PROXY=socks5h://127.0.0.1:1080
export HTTPS_PROXY=socks5h://127.0.0.1:1080

# Openvpn scripts can't access the environment variables, so save them to a file
echo "PRIVATE_NET=$PRIVATE_NET" > /env

/sbin/ip -o -4 route show to default > /default_route

if [ -z "$TIMEOUT" ] || [ "$TIMEOUT" = '0' ]; then
  echo "Starting VPN with no timeout"
  cmd=openvpn
else
  echo "Starting VPN with timeout $TIMEOUT"
  cmd="timeout $TIMEOUT openvpn"
fi

echo "user: $VPN_USER and file: $VPN_FILE"

# Start openvpn and show the command
set -v
$cmd \
  $OPENVPN_ARGS \
  --config "$VPN_FILE" \
  --script-security 2 \
  --up /scripts/up \
  --route-up /scripts/route-up \
  --route-delay 1 \
  --route-pre-down /scripts/down \
  --up-restart \
  --ping 10 \
  --ping-restart 10 \
  --persist-tun \
  --auth-user-pass <(echo -e "$VPN_USER\n$VPN_PASS")

# We should never reach this if we're not in interactive mode
if [ ! "$SHELL" ]; then
  exit 1
fi

# Wait until VPN says we're up
for i in {1..60}; do
  echo "Waiting for vpn $i"
  if [ ! -f /up ]; then
    sleep 1
  else
    break
  fi
done

echo -n "Up at: "
cat /up
echo "vpn ip: $(get_ip)"

exec zsh
